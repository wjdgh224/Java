import java.util.Scanner;

abstract class  GameObject {
	protected int distance;
	protected int x, y;
	public GameObject(int startX, int startY, int distance) {
		this.x = startX;
		this.y = startY;
		this.distance = distance;
	}
	public int getX() { return x; }
	public int getY() { return y; }
	public boolean collide(GameObject p) {
		if(this.x == p.getX() && this.y == p.getY())
			return true;
		else
			return false;
	}
	protected abstract void move();
	protected abstract char getShape();
}

class Bear extends GameObject {
	Scanner scanner = new Scanner(System.in);
	Bear(int startX, int startY, int distance) {
		super(startX, startY, distance);
	}
	protected void move() {
		System.out.print("왼쪽(a), 아래(s), 위(d), 오른쪽(f) >> ");
		char key = (scanner.next()).charAt(0);
		switch(key) {
			case 'a':
				if(x>0)
					this.y -= this.distance;
				else
					this.y = 0;
				break;
			case 's'://9,10
				if(y<9)
					this.x += this.distance;
				else
					this.x = 9;
				break;
			case 'd':
				if(y>0)
					this.x -= this.distance;
				else
					this.x = 0;
				break;
			case 'f':
				if(x<19)
					this.y += this.distance;
				else
					this.y = 19;
				break;
			default:
				System.out.println("error");				
		}
	}
	protected char getShape() {
		return 'B';
	}
	
}

class Fish extends GameObject {//5번중 2번만 이동
	Fish(int startX, int startY, int distance) {
		super(startX, startY, distance);
	}
	protected void move() {
		int random = (int)(Math.random()*4);
		switch(random) {
		case 0:
			if(x>0)
				this.x -= this.distance;
			else
				this.x = 0;
			break;
		case 1:
			if(y<9)
				this.y += this.distance;
			else
				this.y = 9;
			break;
		case 2:
			if(y>0)
				this.y -= this.distance;
			else
				this.y = 0;
			break;
		default:
			if(x<19)
				this.y += this.distance;
			else
				this.y = 19;
			break;			
		}
	}
	protected char getShape() {
		return '@';
	}
}

public class practice {
	public static void main(String[] args) {
		Bear bear = new Bear(0, 0, 1); Fish fish = new Fish(5, 5, 1); int count5 = 0, count2 = 0;
		char[][] array = {{'B', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '@', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
						  {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'}
						 };
		System.out.println("** Bear의 Fish 먹기 게임을 시작합니다.**");
		for(int i=0; i<array.length; i++) {
			for(int j=0; j<array[i].length; j++) {
				System.out.print(array[i][j]);
			}
			System.out.println();
		}
		while(true) {
			array[bear.x][bear.y] = '-'; array[fish.x][fish.y] = '-';
			bear.move();
			int key = (int)(Math.random()*2);
			if(key == 1 && count2 < 2 ) {//1이 나오고 2번 이동 하지 않았으면
				fish.move(); count2++;
			}
			if(count5 == 3 && count2 == 0) {
				fish.move(); count2++;
			}
			if(count5 == 4 && count2 == 1) {
				fish.move(); count2++;
			}
			count5++;
			if(count5 == 5 && count2 == 2) {
				count2 = 0; count5 = 0;
			}

			array[fish.x][fish.y] = fish.getShape(); array[bear.x][bear.y] = bear.getShape();  
			for(int i=0; i<array.length; i++) {
				for(int j=0; j<array[i].length; j++) {
					System.out.print(array[i][j]);
				}
				System.out.println();
			}

			if(bear.collide(fish)) {
				System.out.println("Bear Wins!!");
				break;
			}
			
		}
		
	}
}
